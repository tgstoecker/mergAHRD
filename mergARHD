#!/bin/bash

#safer programming env: some bugs recognized -> errors
#set -o pipefail -o noclobber -o nounset
set -o pipefail -o noclobber

bold=$(tput bold)
normal=$(tput sgr0)

CLEAR='\033[0m'
RED='\033[0;31m'

function usage() {
  if [ -n "$1" ]; then
    echo -e "${RED}\xF0\x9F\x91\x89 $1${CLEAR}\n";
  fi
  echo "Usage: $0 [-g, --GO_TABLE] [-h, --HRD_TABLE] [-s, --SEPERATOR]"
  echo "  -g, --GO_TABLE   AHRD output that ${bold}INCL.${normal} GO term predictions"
  echo "  -h, --HRD_TABLE   AHRD output ${bold}WITHOUT${normal} GO term predictions"
  echo "  -s, --SEPERATOR   First SEPERATOR between base gene name and transcript/protein suffixes"
  echo "  The output is a .csv file in the current working directory called ${bold}mergAHRD_GeneLevel.csv${normal}"
  echo ""
  echo "Example: $0 --GO_TABLE AHRD_go_prediction.csv --HRD_TABLE AHRD_human_readable_descriptions.csv -s ."
  echo ""
  exit 1
}


while [[ "$#" > 0 ]]; do
    case $1 in
        -g|--GO_TABLE) GO_TABLE="$2"; shift;shift ;;
        -h|--HRD_TABLE) HRD_TABLE="$2"; shift;shift ;;
        -s|--SEPERATOR) SEPERATOR="$2"; shift;shift ;;
        *) usage "Unknown parameter passed: $1"; shift; shift;;
    esac;
done

# verify params
#if [[ $# -ne 1 ]]; then usage "$0: Both input tables and a seperator are required!"; fi;
if [ -z "$GO_TABLE" ]; then usage "AHRD output table with GO terms is not provided!"; fi;
if [ -z "$HRD_TABLE" ]; then usage "AHRD output table with just Human Readable descriptions is not provided!"; fi;
if [ -z "$SEPERATOR" ]; then usage "Protein Name trailing seperator; e.g. '.' to remove '.1.cds1' from TraesCS2B02G189200.1.cds1"; fi;


#remove .transcript endings, etc. from first column
#reduce all names to gene level
#but first pass seperator variable to awk (first line);
#the trick here is to let the shell handle the variable exapnsion and nesting it like this: '" $variable"'


awk -F "\t" '{sub(/\'"$SEPERATOR"'.*$/,"",$1)}; OFS="\t" ' $GO_TABLE |
`#also only keep gene name and GO terms` \
    awk -F "\t" '{print $1, $6}' OFS="\t" |
`#sort based on gene names; next step: merge GO term values per gene; keep all here; redundancy removed later` \
    sort -k1,1 |
`#next line: Initializes while loop, precrementing i since $0 = full line in awk; starts at $1 (first field).` \
`#Loops through the line until the end. + change of field seperator.` \
`#So, if input is not in the array !a[$i]++, then it prints $i, if it is, it prints just the field seperator.` \
    awk  -F"\t" ' BEGIN{num_old="";num_new=""}
    {
        if (num_old==""){num_old=$1;num_new=$1}
        else {num_new=$1}
        if (num_old==num_new){printf ", " $2}
        if (num_old != num_new) {printf"\n";num_old=num_new;printf $1"\t"$2 }
    } END {printf "\n"} ' | tee >(cat > genes_go_intermediate)  | awk -F "\t" '{print $2}' |
`#Normally = null split. Here, it resets i for the next line; shorthand to delete array;` \
    awk -F ", " '{ while(++i<=NF) printf (!a[$i]++) ? $i FS : ""; i=split("", a); print ""}; ' |
`#remove last comma in every line which is superfluous` \
    sed 's/, $//' |
`#delete first line, where AHRD info used to be` \
    sed '1d' > 1_AHRD_GO_formatted.csv &&
`#merge gene names and non-redundant HRDs` \
    tail -n +2 genes_go_intermediate | awk -F "\t" '{print $1}' OFS="\t" | paste - 1_AHRD_GO_formatted.csv > tmp_AHRD_GO_formatted.csv &


#assign the background program PIDs to variable; $! is the last launched process PID
P1=$!


#second part with table lacking GO terms


awk -F "\t" '{sub(/\'"$SEPERATOR"'.*$/,"",$1)}; OFS="\t" ' $HRD_TABLE |
`#also only keep gene name ` \
    awk -F "\t" '{print $1, $4}' OFS="\t" |
`#sort based on gene names; next step: merge GO term values per gene; keep all here; redundancy removed later` \
    sort -k1,1 |
`#next line: Initializes while loop, precrementing i since $0 = full line in awk; starts at $1 (first field).` \
`#Loops through the line until the end. + change of field seperator.` \
`#So, if input is not in the array !a[$i]++, then it prints $i, if it is, it prints just the field seperator.` \
    awk  -F"\t" ' BEGIN{num_old="";num_new=""}
    {
        if (num_old==""){num_old=$1;num_new=$1}
        else {num_new=$1}
        if (num_old==num_new){printf ", " $2}
        if (num_old != num_new) {printf"\n";num_old=num_new;printf $1"\t"$2 }
    } END {printf "\n"} ' | tee >(cat > genes_hrd_intermediate)  | awk -F "\t" '{print $2}' |
`#Normally = null split. Here, it resets i for the next line; shorthand to delete array;` \
    awk -F ", " '{ while(++i<=NF) printf (!a[$i]++) ? $i FS : ""; i=split("", a); print ""}; ' |
`#remove last comma in every line which is superfluous` \
    sed 's/, $//' |
`#delete first line, where AHRD info used to be` \
    sed '1d' > 1_AHRD_HRD_formatted.csv &&
    tail -n +2 genes_hrd_intermediate | awk -F "\t" '{print $1}' OFS="\t" | paste - 1_AHRD_HRD_formatted.csv > tmp_AHRD_HRD_formatted.csv &


#assign the background program PIDs to variable; $! is the last launched process PID
P2=$!


#wait for both processes to finish
wait "$P1" "$P2"


#since both files are sorted we can let awk trickery be for this last bit and use a simple join
join \
--check-order \
-t $'\t' \
-1 1 -2 1 tmp_AHRD_HRD_formatted.csv tmp_AHRD_GO_formatted.csv > GeneLevel_mergAHRD.csv

#update header of final output
sed -i '1s/Protein-Accession/Gene-Name/' GeneLevel_mergAHRD.csv

#cleanup
rm tmp_AHRD_GO_formatted.csv tmp_AHRD_HRD_formatted.csv 1_AHRD_GO_formatted.csv 1_AHRD_HRD_formatted.csv genes_go_intermediate genes_hrd_intermediate

#finishing message
echo "${bold}All Done!"
echo "Your file is here: ./GeneLevel_mergAHRD.csv"
echo "Have fun with your gene level functional annotation for your species/genotype :D${normal}"




